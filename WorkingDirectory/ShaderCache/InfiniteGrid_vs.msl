#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

constant float4 ImmCB_0[6] =
{
	float4(0.0, -1.0, 0.0, -1.0),
	float4(2.80259693e-45, 1.0, 0.0, -1.0),
	float4(1.40129846e-45, 1.0, 0.0, 1.0),
	float4(2.80259693e-45, -1.0, 0.0, 1.0),
	float4(0.0, 0.0, 0.0, 0.0),
	float4(4.20389539e-45, 0.0, 0.0, 0.0)
};
struct UBO_Type
{
    float4x4 _47_VP;
    float _47_GridSize;
    float3 _47_CameraWorldPos;
};

struct Mtl_VertexOut
{
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]];
    float4 mtl_Position [[ position ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant UBO_Type& UBO [[ buffer(0) ]],
    uint mtl_VertexID [[ vertex_id ]],
    uint mtl_BaseVertex [[ base_vertex ]])
{
#if !UNITY_SUPPORT_INDIRECT_BUFFERS
    mtl_BaseVertex = 0;
#endif
    mtl_VertexID = mtl_VertexID - mtl_BaseVertex;
    Mtl_VertexOut output;
    float4 u_xlat0;
    uint u_xlatu0;
    float4 u_xlat1;
    u_xlatu0 = mtl_VertexID;
    u_xlat0.x = ImmCB_0[int(u_xlatu0)].x;
    u_xlat0.xy = ImmCB_0[as_type<int>(u_xlat0.x)].yw;
    u_xlat0.xy = fma(u_xlat0.xy, float2(UBO._47_GridSize), UBO._47_CameraWorldPos.xyzx.xz);
    output.TEXCOORD1.xz = u_xlat0.xy;
    output.TEXCOORD1.y = 0.0;
    u_xlat1 = u_xlat0.yyyy * UBO._47_VP[2];
    u_xlat0 = fma(u_xlat0.xxxx, UBO._47_VP[0], u_xlat1);
    output.mtl_Position = u_xlat0 + UBO._47_VP[3];
    return output;
}
