#pragma clang diagnostic ignored "-Wmissing-prototypes"
#pragma clang diagnostic ignored "-Wmissing-braces"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

template<typename T, size_t Num>
struct spvUnsafeArray
{
    T elements[Num ? Num : 1];
    
    thread T& operator [] (size_t pos) thread
    {
        return elements[pos];
    }
    constexpr const thread T& operator [] (size_t pos) const thread
    {
        return elements[pos];
    }
    
    device T& operator [] (size_t pos) device
    {
        return elements[pos];
    }
    constexpr const device T& operator [] (size_t pos) const device
    {
        return elements[pos];
    }
    
    constexpr const constant T& operator [] (size_t pos) const constant
    {
        return elements[pos];
    }
    
    threadgroup T& operator [] (size_t pos) threadgroup
    {
        return elements[pos];
    }
    constexpr const threadgroup T& operator [] (size_t pos) const threadgroup
    {
        return elements[pos];
    }
};

struct UBO
{
    float4x4 VP;
    float GridSize;
    float3 CameraWorldPos;
};

constant spvUnsafeArray<int, 6> _16 = spvUnsafeArray<int, 6>({ 0, 2, 1, 2, 0, 3 });
constant spvUnsafeArray<float3, 4> _37 = spvUnsafeArray<float3, 4>({ float3(-1.0, 0.0, -1.0), float3(1.0, 0.0, -1.0), float3(1.0, 0.0, 1.0), float3(-1.0, 0.0, 1.0) });

struct main0_out
{
    float3 WorldPos [[user(locn1)]];
    float4 gl_Position [[position]];
};

vertex main0_out main0(constant UBO& _47 [[buffer(0)]], uint gl_VertexIndex [[vertex_id]])
{
    main0_out out = {};
    int Index = _16[int(gl_VertexIndex)];
    float3 vPos3 = _37[Index] * _47.GridSize;
    vPos3.x += _47.CameraWorldPos.x;
    vPos3.z += _47.CameraWorldPos.z;
    float4 vPos4 = float4(vPos3, 1.0);
    out.gl_Position = _47.VP * vPos4;
    out.WorldPos = vPos3;
    return out;
}

