#pragma clang diagnostic ignored "-Wmissing-prototypes"

#include <metal_stdlib>
#include <simd/simd.h>

using namespace metal;

struct UBO
{
    packed_float3 CameraWorldPos;
    float GridSize;
    float GridMinPixelsBetweenCells;
    float GridCellSize;
    float4 GridColorThin;
    float4 GridColorThick;
};

struct main0_out
{
    float4 FragColor [[color(0)]];
};

struct main0_in
{
    float3 WorldPos [[user(locn1)]];
};

// Implementation of the GLSL mod() function, which is slightly different than Metal fmod()
template<typename Tx, typename Ty>
inline Tx mod(Tx x, Ty y)
{
    return x - y * floor(x / y);
}

static inline __attribute__((always_inline))
float log10(thread const float& x)
{
    return log(x) / 2.302585124969482421875;
}

static inline __attribute__((always_inline))
float2 satv(thread const float2& x)
{
    return fast::clamp(x, float2(0.0), float2(1.0));
}

static inline __attribute__((always_inline))
float max2(thread const float2& v)
{
    return fast::max(v.x, v.y);
}

static inline __attribute__((always_inline))
float satf(thread const float& x)
{
    return fast::clamp(x, 0.0, 1.0);
}

fragment main0_out main0(main0_in in [[stage_in]], constant UBO& _92 [[buffer(0)]])
{
    main0_out out = {};
    float2 dvx = float2(dfdx(in.WorldPos.x), dfdy(in.WorldPos.x));
    float2 dvy = float2(dfdx(in.WorldPos.z), dfdy(in.WorldPos.z));
    float lx = length(dvx);
    float ly = length(dvy);
    float2 dudv = float2(lx, ly);
    float l = length(dudv);
    float param = (l * _92.GridMinPixelsBetweenCells) / _92.GridCellSize;
    float LOD = fast::max(0.0, log10(param) + 1.0);
    float GridCellSizeLod0 = _92.GridCellSize * pow(10.0, floor(LOD));
    float GridCellSizeLod1 = GridCellSizeLod0 * 10.0;
    float GridCellSizeLod2 = GridCellSizeLod1 * 10.0;
    dudv *= 4.0;
    float2 mod_div_dudv = mod(in.WorldPos.xz, float2(GridCellSizeLod0)) / dudv;
    float2 param_1 = mod_div_dudv;
    float2 param_2 = float2(1.0) - abs((satv(param_1) * 2.0) - float2(1.0));
    float Lod0a = max2(param_2);
    mod_div_dudv = mod(in.WorldPos.xz, float2(GridCellSizeLod1)) / dudv;
    float2 param_3 = mod_div_dudv;
    float2 param_4 = float2(1.0) - abs((satv(param_3) * 2.0) - float2(1.0));
    float Lod1a = max2(param_4);
    mod_div_dudv = mod(in.WorldPos.xz, float2(GridCellSizeLod2)) / dudv;
    float2 param_5 = mod_div_dudv;
    float2 param_6 = float2(1.0) - abs((satv(param_5) * 2.0) - float2(1.0));
    float Lod2a = max2(param_6);
    float LOD_fade = fract(LOD);
    float4 Color;
    if (Lod2a > 0.0)
    {
        Color = _92.GridColorThick;
        Color.w *= Lod2a;
    }
    else
    {
        if (Lod1a > 0.0)
        {
            Color = mix(_92.GridColorThick, _92.GridColorThin, float4(LOD_fade));
            Color.w *= Lod1a;
        }
        else
        {
            Color = _92.GridColorThin;
            Color.w *= (Lod0a * (1.0 - LOD_fade));
        }
    }
    float param_7 = length(in.WorldPos.xz - float2(_92.CameraWorldPos[0], _92.CameraWorldPos[2])) / _92.GridSize;
    float OpacityFalloff = 1.0 - satf(param_7);
    Color.w *= OpacityFalloff;
    out.FragColor = Color;
    return out;
}

