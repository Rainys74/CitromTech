#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

#ifndef XLT_REMAP_O
	#define XLT_REMAP_O {0, 1, 2, 3, 4, 5, 6, 7}
#endif
constexpr constant uint xlt_remap_o[] = XLT_REMAP_O;
struct UBO_Type
{
    float3 _92_CameraWorldPos;
    float _92_GridSize;
    float _92_GridMinPixelsBetweenCells;
    float _92_GridCellSize;
    float4 _92_GridColorThin;
    float4 _92_GridColorThick;
};

struct Mtl_FragmentIn
{
    float3 TEXCOORD1 [[ user(TEXCOORD1) ]] ;
};

struct Mtl_FragmentOut
{
    float4 SV_Target0 [[ color(xlt_remap_o[0]) ]];
};

fragment Mtl_FragmentOut xlatMtlMain(
    constant UBO_Type& UBO [[ buffer(0) ]],
    Mtl_FragmentIn input [[ stage_in ]])
{
    Mtl_FragmentOut output;
    float4 u_xlat0;
    bool3 u_xlatb0;
    float4 u_xlat1;
    float4 u_xlat2;
    float4 u_xlat3;
    float4 u_xlat4;
    float2 u_xlat5;
    float2 u_xlat10;
    u_xlat0.xy = dfdx(input.TEXCOORD1.xz);
    u_xlat0.zw = dfdy(input.TEXCOORD1.xz);
    u_xlat0.x = dot(u_xlat0.xz, u_xlat0.xz);
    u_xlat0.y = dot(u_xlat0.yw, u_xlat0.yw);
    u_xlat1 = sqrt(u_xlat0.xyxy);
    u_xlat0.x = dot(u_xlat1.zw, u_xlat1.zw);
    u_xlat1 = u_xlat1 * float4(4.0, 4.0, 4.0, 4.0);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * UBO._92_GridMinPixelsBetweenCells;
    u_xlat0.x = u_xlat0.x / UBO._92_GridCellSize;
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = fma(u_xlat0.x, 0.30102998, 1.0);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat5.x = floor(u_xlat0.x);
    u_xlat0.x = fract(u_xlat0.x);
    u_xlat5.x = u_xlat5.x * 3.32192802;
    u_xlat5.x = exp2(u_xlat5.x);
    u_xlat5.x = u_xlat5.x * UBO._92_GridCellSize;
    u_xlat10.xy = input.TEXCOORD1.xz / u_xlat5.xx;
    u_xlat10.xy = floor(u_xlat10.xy);
    u_xlat10.xy = fma((-u_xlat5.xx), u_xlat10.xy, input.TEXCOORD1.xz);
    u_xlat2 = u_xlat5.xxxx * float4(10.0, 10.0, 100.0, 100.0);
    u_xlat5.xy = u_xlat10.xy / u_xlat1.xy;
    u_xlat5.xy = clamp(u_xlat5.xy, 0.0f, 1.0f);
    u_xlat5.xy = fma(u_xlat5.xy, float2(2.0, 2.0), float2(-1.0, -1.0));
    u_xlat5.xy = -abs(u_xlat5.xy) + float2(1.0, 1.0);
    u_xlat5.x = max(u_xlat5.y, u_xlat5.x);
    u_xlat10.x = (-u_xlat0.x) + 1.0;
    u_xlat5.x = u_xlat10.x * u_xlat5.x;
    u_xlat3.w = u_xlat5.x * UBO._92_GridColorThin.w;
    u_xlat4 = input.TEXCOORD1.xzxz / u_xlat2.yyww;
    u_xlat4 = floor(u_xlat4);
    u_xlat2 = fma((-u_xlat2), u_xlat4, input.TEXCOORD1.xzxz);
    u_xlat1 = u_xlat2 / u_xlat1;
    u_xlat1 = clamp(u_xlat1, 0.0f, 1.0f);
    u_xlat1 = fma(u_xlat1, float4(2.0, 2.0, 2.0, 2.0), float4(-1.0, -1.0, -1.0, -1.0));
    u_xlat1 = -abs(u_xlat1) + float4(1.0, 1.0, 1.0, 1.0);
    u_xlat5.xy = max(u_xlat1.wy, u_xlat1.zx);
    u_xlat1 = UBO._92_GridColorThin + (-UBO._92_GridColorThick);
    u_xlat1 = fma(u_xlat0.xxxx, u_xlat1, UBO._92_GridColorThick);
    u_xlat1.w = u_xlat5.y * u_xlat1.w;
    u_xlatb0.xz = (float2(0.0, 0.0)<u_xlat5.xy);
    u_xlat2.w = u_xlat5.x * UBO._92_GridColorThick.w;
    u_xlat3.xyz = UBO._92_GridColorThin.xyz;
    u_xlat1 = (u_xlatb0.z) ? u_xlat1 : u_xlat3;
    u_xlat2.xyz = UBO._92_GridColorThick.xyz;
    u_xlat0 = (u_xlatb0.x) ? u_xlat2 : u_xlat1;
    u_xlat1.xy = input.TEXCOORD1.xz + (-UBO._92_CameraWorldPos.xyzx.xz);
    u_xlat1.x = dot(u_xlat1.xy, u_xlat1.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat1.x = u_xlat1.x / UBO._92_GridSize;
    u_xlat1.x = clamp(u_xlat1.x, 0.0f, 1.0f);
    u_xlat1.x = (-u_xlat1.x) + 1.0;
    output.SV_Target0.w = u_xlat0.w * u_xlat1.x;
    output.SV_Target0.xyz = u_xlat0.xyz;
    return output;
}
