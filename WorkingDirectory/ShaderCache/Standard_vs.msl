#include <metal_stdlib>
#include <metal_texture>
using namespace metal;

#if !(__HAVE_FMA__)
#define fma(a,b,c) ((a) * (b) + (c))
#endif

struct Matrices_Type
{
    float4x4 transform;
    float3 cameraLocalPos;
};

struct Mtl_VertexIn
{
    float3 Position0 [[ attribute(0) ]] ;
    float3 Normal0 [[ attribute(1) ]] ;
    float2 TexCoord0 [[ attribute(2) ]] ;
};

struct Mtl_VertexOut
{
    float2 TexCoord0 [[ user(TexCoord0) ]];
    float4 mtl_Position [[ position ]];
    float3 Normal0 [[ user(Normal0) ]];
    float3 LocalPosition0 [[ user(LocalPosition0) ]];
};

vertex Mtl_VertexOut xlatMtlMain(
    constant Matrices_Type& Matrices [[ buffer(0) ]],
    Mtl_VertexIn input [[ stage_in ]])
{
    Mtl_VertexOut output;
    float4 u_xlat0;
    output.TexCoord0.xy = input.TexCoord0.xy;
    u_xlat0.xyz = input.Position0.xyz;
    u_xlat0.w = 1.0;
    output.mtl_Position.x = dot(u_xlat0, Matrices.transform[0]);
    output.mtl_Position.y = dot(u_xlat0, Matrices.transform[1]);
    output.mtl_Position.z = dot(u_xlat0, Matrices.transform[2]);
    output.mtl_Position.w = dot(u_xlat0, Matrices.transform[3]);
    output.Normal0.xyz = input.Normal0.xyz;
    output.LocalPosition0.xyz = input.Position0.xyz;
    return output;
}
